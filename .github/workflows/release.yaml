name: Release

on:
  workflow_run:
    workflows: [ CI ]
    branches: [ main ]
    types:
      - completed
  push:
    branches: [ main ]
    paths:
      - 'Cargo.toml'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force release creation for current version'
        type: boolean
        required: true
        default: false
      dev_release:
        description: 'Create a dev-latest release instead of a semantic version release'
        type: boolean
        required: true
        default: false

permissions:
  contents: write

jobs:
  check-ci:
    runs-on: ubuntu-latest
    outputs:
      ci_passed: ${{ steps.ci-status.outputs.status == 'success' }}
    steps:
      - name: Check CI Status
        id: ci-status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          status=$(gh api repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs \
            --jq '.check_runs[] | select(.name == "CI") | .conclusion')
          echo "status=$status" >> $GITHUB_OUTPUT

  check-version:
    needs: check-ci
    if: needs.check-ci.outputs.ci_passed == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      should_release: ${{ steps.check-tag.outputs.should_release }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from Cargo.toml
        id: get-version
        run: |
          version="v$(grep -m1 '^version = ' Cargo.toml | cut -d '"' -f2)"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check-tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.force_release }}" == "true" ]] || \
             ! git ls-remote --tags origin | grep -q "refs/tags/v${{ steps.get-version.outputs.version }}"; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT

  release:
    needs: [check-ci, check-version]
    if: needs.check-ci.outputs.ci_passed == 'true' && (needs.check-version.outputs.should_release == 'true' || inputs.dev_release == 'true')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: dankbytes.exe
            simple_target: x86_64-windows
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: dankbytes
            simple_target: x86_64-linux
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: dankbytes
            simple_target: x86_64-macos

    steps:
      - uses: actions/checkout@v4

      - name: Cache Registry
        uses: actions/cache@v3
        with:
          path: |
            ${{ runner.os != 'Windows' && '~/.cargo/registry/' || '' }}
            ${{ runner.os != 'Windows' && '~/.cargo/git/' || '' }}
            ${{ runner.os == 'Windows' && 'target/debug/deps/' || '' }}
            ${{ runner.os == 'Windows' && 'target/debug/.fingerprint/' || '' }}
            ${{ runner.os != 'Windows' && 'target/' || '' }}
          key: dev-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            dev-${{ runner.os }}-cargo-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        env:
          RUST_BACKTRACE: 1
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create Release
        if: matrix.os == 'ubuntu-latest' # Only create the release once
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ inputs.dev_release == 'true' && 'dev-latest' || needs.check-version.outputs.version }}
          tag_name: ${{ inputs.dev_release == 'true' && 'dev-latest' || needs.check-version.outputs.version }}
          draft: false
          prerelease: ${{ inputs.dev_release == 'true' }}
