name: Development Build

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    if: ${{ github.event.workflow_run.conclusion == 'success' }} || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: dankbytes.exe
            simple_target: x86_64-windows
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: dankbytes
            simple_target: x86_64-linux
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: dankbytes
            simple_target: x86_64-macos

    steps:
      - uses: actions/checkout@v4

      - name: Cache Registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: dev-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}
      
      - name: Build
        env:
          CARGO_TERM_COLOR: always
          RUST_BACKTRACE: 1
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package Binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../dankbytes-dev-${{ matrix.simple_target }}.zip ${{ matrix.binary }}

      - name: Package Binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../dankbytes-dev-${{ matrix.simple_target }}.tar.gz ${{ matrix.binary }}

      - name: Upload Release Asset
        uses: actions/upload-artifact@v3
        with:
          name: release-assets
          path: dankbytes-dev-${{ matrix.simple_target }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Release Assets
        uses: actions/download-artifact@v3
        with:
          name: release-assets
          path: assets

      - name: Create/Update Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete dev-latest --yes || true
          git push --delete origin dev-latest || true
          gh release create dev-latest \
            --title "⚠️ dev-latest" \
            --notes "development build from commit ${{ github.sha }}" \
            --prerelease \
            ./assets/*
