name: Development Build

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]

permissions:
  contents: write  # Only need contents write for release creation

jobs:
  build:
    if: ${{ github.event.workflow_run.conclusion == 'success' }} || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: dankbytes.exe
            simple_target: x86_64-windows
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: dankbytes
            simple_target: x86_64-linux
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: dankbytes
            simple_target: x86_64-macos

    steps:
      - uses: actions/checkout@v4

      - name: Cache Registry
        uses: actions/cache@v3
        with:
          path: |
            ${{ runner.os != 'Windows' && '~/.cargo/registry/' || '' }}
            ${{ runner.os != 'Windows' && '~/.cargo/git/' || '' }}
            ${{ runner.os == 'Windows' && '~/.cargo/registry/index/' || '' }}
            ${{ runner.os == 'Windows' && '~/.cargo/registry/cache/' || '' }}
            ${{ runner.os == 'Windows' && '~/.cargo/git/db/' || '' }}
            ${{ runner.os == 'Windows' && '~/.cargo/git/checkouts/' || '' }}
            target/
          key: dev-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            dev-${{ runner.os }}-cargo-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}
      
      - name: Build
        env:
          CARGO_TERM_COLOR: always
          RUST_BACKTRACE: 1
          CARGO_BUILD_JOBS: ${{ runner.os == 'Windows' && 2 || '' }}  # Limit parallel jobs on Windows
        run: cargo build --target ${{ matrix.target }}  # Deliberately omit --release for debug builds

      - name: Package Binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/debug
          7z a ../../../dankbytes-dev-${{ matrix.simple_target }}.zip ${{ matrix.binary }}

      - name: Package Binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/debug
          tar czf ../../../dankbytes-dev-${{ matrix.simple_target }}.tar.gz ${{ matrix.binary }}

      - name: Delete existing release
        if: matrix.os == 'ubuntu-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete dev-latest --yes || true
          git push --delete origin dev-latest || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.os }}
          path: dankbytes-dev-${{ matrix.simple_target }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: "⚠️ dev-latest"
          tag_name: dev-latest
          prerelease: true
          draft: false
          body: |
            development build from commit ${{ github.sha }}
          files: |
            artifacts/**/*
